# -*- coding: utf-8 -*-
"""Revised Sentence topic classification for 105 reports.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_o1ufhLsw7ldjhyl1umgr95eXvh0G-70
"""

from numpy import array
from numpy import argmax
import nltk
nltk.download('punkt')
import pandas as pd
from nltk.tokenize import TweetTokenizer, sent_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.decomposition import LatentDirichletAllocation
from google.colab import files
import io
import numpy as np

from google.colab import drive
drive.mount('/content/drive')
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.multiclass import OneVsRestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics 
from sklearn.ensemble import RandomForestClassifier

df_train_sen= pd.read_csv("/content/drive/My Drive/Thesis/105 reports/train_sen.csv",encoding='ISO-8859-1')
df_test_sen= pd.read_csv("/content/drive/My Drive/Thesis/105 reports/test_sen_complete.csv",encoding='ISO-8859-1')

#TFIDF vectorizer
vectorizer = TfidfVectorizer(stop_words="english")
X = vectorizer.fit_transform(df_train_sen["sentences"].tolist())
lda = LatentDirichletAllocation(n_components=10, random_state=0)
X_lda = lda.fit_transform(X)
Y_target = df_train_sen['Sentence topic']

X_train = X_lda
y_train = Y_target
X_test = vectorizer.fit_transform(df_test_sen["sentences"].tolist())
lda = LatentDirichletAllocation(n_components=10, random_state=0)
X_test_lda = lda.fit_transform(X_test)
Y_test = df_test_sen['sentence_topic']

# Create Logistic Regression
model = OneVsRestClassifier(SVC(C=0.0001, kernel="rbf", gamma="auto",probability=True))
clf = SVC(kernel='rbf', probability=True) 
clf.fit(X_train, y_train)
y_hat_prob_lr = clf.predict_proba(X_test_lda)
yhat_lr = clf.predict(X_test_lda)

# Create Decision Tree classifer object
clf_dt = DecisionTreeClassifier()
clf_dt = clf_dt.fit(X_train,y_train)
yhat_dt = clf_dt.predict(X_test_lda)

#Predict the response for test dataset
y_hat_prob_dt = clf_dt.predict_proba(X_test_lda)

# Create the model with 100 trees
modelrf = RandomForestClassifier(n_estimators=100, 
                               bootstrap = True,
                               max_features = 'sqrt')
# Fit on training data
modelrf.fit(X_train,y_train)
yhatRF = modelrf.predict(X_test_lda)
y_hat_prob_rf = modelrf.predict_proba(X_test_lda)



